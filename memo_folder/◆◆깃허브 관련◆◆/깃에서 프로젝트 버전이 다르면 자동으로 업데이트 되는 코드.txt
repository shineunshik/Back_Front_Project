import subprocess

def get_git_head(repo_path):
    try:
        # Git 명령어 실행: git rev-parse HEAD
        result_local = subprocess.run(
            ['git', 'rev-parse', 'HEAD'],
            check=True,
            cwd=repo_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        result_git = subprocess.run(
            ['git', 'ls-remote','spring_project', 'HEAD'],
            check=True,
            cwd=repo_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # 실행 결과에서 앞뒤 공백을 제거하고 HEAD 값을 반환
        HEAD_replace = result_git.stdout.strip()

        git_HEAD = HEAD_replace.replace('HEAD','')
        local_HEAD = result_local.stdout.strip()
        
        #깃허브에서 프로젝트 가져오기
        project_restart = subprocess.run(['git','pull','spring_project','master'],
            check=True,
            cwd=repo_path,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        if local_HEAD in git_HEAD:
            data = '로컨 버전= '+local_HEAD+'\n깃 버전= '+git_HEAD+'\n최선 버전입니다.'
        else:
            data = '로컨 버전= '+local_HEAD+'\n깃 버전= '+git_HEAD+'\n버전이 변경되었습니다.'
            project_restart.stdout.strip()
            print('최신 버전으로 업데이트 되었습니다.')

     
        return print(data)

    except subprocess.CalledProcessError as e:
        # 오류가 발생한 경우 예외 처리
        print(f"Error: {e}")
        return None

# Git 저장소의 경로를 지정
repository_path = '/root/spring_project'

get_git_head(repository_path)