Dockerfile 작성

Dockerfile을 작성하여 MySQL을 설치하고 초기 데이터베이스 및 테이블을 설정합니다. 예를 들어, 다음과 같이 작성할 수 있습니다:

//dockerfile
FROM mysql:latest

# 환경 변수 설정
ENV MYSQL_ROOT_PASSWORD=1234
ENV MYSQL_DATABASE=board_back
ENV MYSQL_USER=root
ENV MYSQL_PASSWORD=1234

# 초기 데이터베이스 및 테이블 설정
COPY ./init.sql /docker-entrypoint-initdb.d/


//init.sql 파일 작성
//초기 데이터베이스 및 테이블을 설정하는 SQL 쿼리를 담은 init.sql 파일을 작성합니다:

CREATE DATABASE board_back;

CREATE USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1234';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '1234';
FLUSH PRIVILEGES;

USE board_back;

CREATE TABLE IF NOT EXISTS board (
    no INT PRIMARY KEY,
    contents VARCHAR(255),
    member_Id INT,
    title VARCHAR(255)
);

INSERT INTO board (no, contents, member_Id, title)
VALUES 
    (1,  'ContentsValue1', 123, 'TitleValue1'),
    (2,  'ContentsValue2', 456, 'TitleValue2'),
    (3,  'ContentsValue3', 789, 'TitleValue3');










//빌드 및 실행
//Docker 이미지를 빌드하고 실행합니다:
bash
docker build -t my-mysql-image .
docker run -p 3306:3306 --name my-mysql-container -d my-mysql-image
위 명령은 MySQL을 포트 3306로 바인딩하여 실행합니다.


//컨테이너에 접속하여 쿼리 실행
MySQL 컨테이너에 접속하여 초기 데이터베이스와 테이블이 생성되었는지 확인하고, 필요한 경우 쿼리를 실행할 수 있습니다:
docker exec -it my-mysql-container mysql -uroot -p
이제 board_back 데이터베이스에는 초기 데이터가 포함된 board 테이블이 생성되어 있을 것입니다.